{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","isValid","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","NewMovie","movieToCheck","onAdd","count","setCount","setIsValid","newMovie","setNewMovie","isUrlValid","url","test","changeHandler","currentMovie","onSubmit","preventDefault","validImdbUrl","validImgUrl","currentCount","disabled","Object","entries","every","key","trim","App","moviesFromServer","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6224feda.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Movie } from '../../types/Movie';\r\nimport './MovieCard.scss';\r\n\r\ntype Props = {\r\n  movie: Movie,\r\n};\r\n\r\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\r\n  <div className=\"card\" data-cy=\"movie-card\">\r\n    <div className=\"card-image\">\r\n      <figure className=\"image is-4by3\">\r\n        <img\r\n          src={movie.imgUrl}\r\n          alt=\"Film logo\"\r\n        />\r\n      </figure>\r\n    </div>\r\n    <div className=\"card-content\">\r\n      <div className=\"media\">\r\n        <div className=\"media-left\">\r\n          <figure className=\"image is-48x48\">\r\n            <img\r\n              src=\"images/imdb-logo.jpeg\"\r\n              alt=\"imdb\"\r\n            />\r\n          </figure>\r\n        </div>\r\n        <div className=\"media-content\">\r\n          <p className=\"title is-8\">{movie.title}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        {movie.description}\r\n        <br />\r\n        <a href={movie.imdbUrl}>IMDB</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport './MoviesList.scss';\r\nimport { MovieCard } from '../MovieCard';\r\nimport { Movie } from '../../types/Movie';\r\n\r\ninterface Props {\r\n  movies: Movie[];\r\n}\r\n\r\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\r\n  <div className=\"movies\">\r\n    {movies.map(movie => (\r\n      <MovieCard\r\n        key={movie.imdbId}\r\n        movie={movie}\r\n      />\r\n    ))}\r\n  </div>\r\n);\r\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (value: string, name: string) => void,\n  isValid?: boolean\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  isValid = true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          name={name}\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(\n            event.target.name,\n            event.target.value,\n          )}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {(hasError || !isValid) && (\n        <p className=\"help is-danger\">{`${label} is ${!isValid ? 'not valid' : 'required'}`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [isValid, setIsValid] = useState({\n    imgUrl: true,\n    imdbUrl: true,\n  });\n\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    description: '',\n  });\n\n  const isFieldsFilled = (movieToCheck: Movie): boolean => {\n    return Object.entries(movieToCheck).every(([key, value]) => {\n      return key !== 'description'\n        ? value.trim() !== ''\n        : typeof value === 'string';\n    });\n  };\n\n  const isUrlValid = (url: string): boolean => {\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    return pattern.test(url);\n  };\n\n  const changeHandler = (name: string, value: string) => {\n    setNewMovie(currentMovie => ({\n      ...currentMovie,\n      [name]: value,\n    }));\n  };\n\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const validImdbUrl = isUrlValid(newMovie.imdbUrl);\n    const validImgUrl = isUrlValid(newMovie.imgUrl);\n\n    if (validImdbUrl && validImgUrl) {\n      onAdd(newMovie);\n      setCount(currentCount => currentCount + 1);\n      setNewMovie({\n        title: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n        description: '',\n      });\n      setIsValid({\n        imgUrl: true,\n        imdbUrl: true,\n      });\n    } else {\n      setIsValid({\n        imgUrl: validImgUrl,\n        imdbUrl: validImdbUrl,\n      });\n    }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={submitHandler}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={(name, value) => {\n          changeHandler(name, value);\n        }}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={(name, value) => {\n          changeHandler(name, value);\n        }}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={(name, value) => {\n          changeHandler(name, value);\n        }}\n        isValid={isValid.imgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={(name, value) => {\n          changeHandler(name, value);\n        }}\n        isValid={isValid.imdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={(name, value) => {\n          changeHandler(name, value);\n        }}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFieldsFilled(newMovie)}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n  const addMovie = (movie: Movie) => {\n    setMovies(currentMovies => [\n      ...currentMovies,\n      movie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}